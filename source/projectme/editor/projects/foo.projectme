<?xml version="1.0" encoding="utf-8"?>
<ProjectMe><Name>unnamed0</Name><NumModules>5</NumModules><Modules><Module><ModuleBase><Type>ShaderModule</Type><Name>Background</Name></ModuleBase><ParameterList><NumParameters>2</NumParameters><Parameter><key>scale</key><type>double</type><value>0.5</value><default>1</default></Parameter><Parameter><key>borderWidth</key><type>double</type><value>0.6</value><default>0.3</default></Parameter></ParameterList><ModuleRenderer><Position><x>-219</x><y>-54</y></Position></ModuleRenderer><ShaderModule><FragmentShader>uniform vec3      iResolution;
uniform float     iGlobalTime;

float scale = 1.0; //###
float borderWidth = 0.3; //###

void main(void)
{
	vec2 uv = gl_FragCoord.xy / iResolution.xy;

  #if 1
	// Smooth box border blend out
	vec2 dir = abs(2.0*uv - vec2(1.0,1.0));
	float r = max(dir.x,dir.y); // for radial blend use: r = length(2.0*uv - vec2(1.0,1.0));
	float border = 1.0 - smoothstep( 1.0-borderWidth, 1.0, r );
  #else
	float border = 1.0;
  #endif

	gl_FragColor = vec4(scale*vec3(uv,0.5+0.5*sin(iGlobalTime)),border);
}</FragmentShader></ShaderModule></Module><Module><ModuleBase><Type>ParticleModule</Type><Name>ParticleSystem</Name></ModuleBase><ParameterList><NumParameters>1</NumParameters><Parameter><key>PointSize</key><type>double</type><value>3.499</value><default>1.5</default><limit_min>0.1</limit_min><limit_max>50</limit_max></Parameter></ParameterList><ModuleRenderer><Position><x>-168</x><y>48</y></Position></ModuleRenderer></Module><Module><ModuleBase><Type>ImageModule</Type><Name>Sprite</Name></ModuleBase><ParameterList><NumParameters>0</NumParameters></ParameterList><ModuleRenderer><Position><x>-331</x><y>48</y></Position></ModuleRenderer><ImageModule><Texture><Filename>G:/Wintermute/wmute/trunk/source/projectme/editor/particle.png</Filename></Texture></ImageModule></Module><Module><ModuleBase><Type>ShaderModule</Type><Name>NoiseGradient</Name></ModuleBase><ParameterList><NumParameters>3</NumParameters><Parameter><key>gradientScale</key><type>double</type><value>14.79999999999998</value><default>10</default></Parameter><Parameter><key>noiseScale</key><type>double</type><value>5</value><default>5</default></Parameter><Parameter><key>timeScale</key><type>double</type><value>0.04999999999999999</value><default>0.05</default></Parameter></ParameterList><ModuleRenderer><Position><x>-368</x><y>-36</y></Position></ModuleRenderer><ShaderModule><FragmentShader>uniform vec3      iResolution;
uniform float     iGlobalTime;

//------------------------------------------------------------------------------
// Perlin noise code
//------------------------------------------------------------------------------

//
// GLSL textureless classic 3D noise &quot;cnoise&quot;,
// with an RSL-style periodic variant &quot;pnoise&quot;.
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-10-11
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/ashima/webgl-noise
//

vec3 mod289(vec3 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec3 P)
{
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

// Classic Perlin noise, periodic variant
float pnoise(vec3 P, vec3 rep)
{
  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

float gradientScale = 10.0; //###
float noiseScale = 5.0; //###
float timeScale = 0.05; //###

float potential( vec2 uv )
{
	return cnoise( noiseScale*vec3(uv,timeScale*iGlobalTime) );
}

vec2 gradient( vec2 uv )
{
	vec2 dx = vec2(1.0,0.0) / iResolution.xy;
	vec2 dy = vec2(0.0,1.0) / iResolution.xy;
	vec2 grad;
	grad.x = 0.5*(potential( uv + dx ) - potential( uv - dx ));
	grad.y = 0.5*(potential( uv + dy ) - potential( uv - dy ));
	return grad;
}

void main(void)
{
	vec2 uv = gl_FragCoord.xy / iResolution.xy;	
	gl_FragColor = vec4(gradientScale*vec3(gradient(uv),0.0),1.0);
}</FragmentShader></ShaderModule></Module><Module><ModuleBase><Type>ShaderModule</Type><Name>Noise</Name></ModuleBase><ParameterList><NumParameters>5</NumParameters><Parameter><key>borderWidth</key><type>double</type><value>0.3</value><default>0.3</default></Parameter><Parameter><key>colorScale</key><type>double</type><value>0.7</value><default>1</default></Parameter><Parameter><key>isoValue</key><type>double</type><value>0.4</value><default>0.3</default></Parameter><Parameter><key>isoStepSize</key><type>double</type><value>3.1</value><default>3.1</default></Parameter><Parameter><key>isoBandWidth</key><type>double</type><value>0.01</value><default>0.015</default></Parameter></ParameterList><ModuleRenderer><Position><x>-457</x><y>-111</y></Position></ModuleRenderer><ShaderModule><FragmentShader>uniform vec3      iResolution;
uniform float     iGlobalTime;

//------------------------------------------------------------------------------
// Perlin noise code
//------------------------------------------------------------------------------

//
// GLSL textureless classic 3D noise &quot;cnoise&quot;,
// with an RSL-style periodic variant &quot;pnoise&quot;.
// Author:  Stefan Gustavson (stefan.gustavson@liu.se)
// Version: 2011-10-11
//
// Many thanks to Ian McEwan of Ashima Arts for the
// ideas for permutation and gradient selection.
//
// Copyright (c) 2011 Stefan Gustavson. All rights reserved.
// Distributed under the MIT license. See LICENSE file.
// https://github.com/ashima/webgl-noise
//

vec3 mod289(vec3 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x)
{
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x)
{
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec3 P)
{
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}

// Classic Perlin noise, periodic variant
float pnoise(vec3 P, vec3 rep)
{
  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period
  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  vec4 ixy = permute(permute(ix) + iy);
  vec4 ixy0 = permute(ixy + iz0);
  vec4 ixy1 = permute(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
}



#define ISOLINES

float borderWidth = 0.3; //###
float colorScale = 1.0; //###

float isoValue = 0.3; //###
float isoStepSize = 3.1; //###
float isoBandWidth = 0.015; //###

void main(void)
{
	vec2 uv = gl_FragCoord.xy / iResolution.xy;
	float n = cnoise( 5.0*vec3(uv,0.05*iGlobalTime) );

  #ifdef ISOLINES
	// Visualize knot lines (i.e. zero-crossings)
	//iso = iGlobalTime / 10.0;//0.3;
	const int isoSteps = 20;
	isoStepSize /=  float(isoSteps);
	float mix = 0.0;
	for( int i=0; i &lt; isoSteps; ++i )
	{
		float isoTemp = mod(isoValue+float(i)*isoStepSize,2.0);
		mix += step( abs(n-isoTemp), isoBandWidth );
	}
	n = mix;
  #endif 

  #if 1
	// Smooth border blend out
	vec2 dir = abs(2.0*uv - vec2(1.0,1.0));
	//float r = max(dir.x,dir.y); // box blend
	float r = length(2.0*uv - vec2(1.0,1.0)); // radial blend
	float border = 1.0 - smoothstep( 1.0-borderWidth, 1.0, r );
  #else
	float border = 1.0;
  #endif

#if 0
	vec3 color = colorScale*vec3(uv,0.5+0.5*sin(iGlobalTime));
#else
	vec3 color = colorScale*vec3(1.0);
#endif

	gl_FragColor = vec4(n*color,border);
}</FragmentShader></ShaderModule></Module></Modules><NumRenderSets>1</NumRenderSets><RenderSets><ModuleBase><Type>RenderSet</Type><Name>RenderSet</Name></ModuleBase><ParameterList><NumParameters>0</NumParameters></ParameterList><ModuleRenderer><Position><x>0</x><y>0</y></Position></ModuleRenderer><RenderSet><NumAreas>2</NumAreas><RenderArea><Name>AreaBackground</Name><NumVertices>4</NumVertices><Vertices><Vertex><Pos><x>-0.9638978</x><y>-0.9496614</y></Pos><TexCoord><u>0</u><v>0</v></TexCoord></Vertex><Vertex><Pos><x>-0.9638978</x><y>0.9361174</y></Pos><TexCoord><u>0</u><v>1</v></TexCoord></Vertex><Vertex><Pos><x>0.9670926</x><y>0.9451467</y></Pos><TexCoord><u>1</u><v>1</v></TexCoord></Vertex><Vertex><Pos><x>0.9734824</x><y>-0.9586907</y></Pos><TexCoord><u>1</u><v>0</v></TexCoord></Vertex></Vertices></RenderArea><RenderArea><Name>AreaParticles</Name><NumVertices>4</NumVertices><Vertices><Vertex><Pos><x>-0.9</x><y>-0.9</y></Pos><TexCoord><u>0</u><v>0</v></TexCoord></Vertex><Vertex><Pos><x>-0.9</x><y>0.9</y></Pos><TexCoord><u>0</u><v>1</v></TexCoord></Vertex><Vertex><Pos><x>0.9</x><y>0.9</y></Pos><TexCoord><u>1</u><v>1</v></TexCoord></Vertex><Vertex><Pos><x>0.9</x><y>-0.9</y></Pos><TexCoord><u>1</u><v>0</v></TexCoord></Vertex></Vertices></RenderArea><ModuleMapper><AreaIndex>0</AreaIndex><ModuleName>Noise</ModuleName><ModuleType>ShaderModule</ModuleType></ModuleMapper><ModuleMapper><AreaIndex>1</AreaIndex><ModuleName>ParticleSystem</ModuleName><ModuleType>ParticleModule</ModuleType></ModuleMapper><ModuleMapper><AreaIndex>2</AreaIndex><ModuleName/><ModuleType/></ModuleMapper><ModuleMapper><AreaIndex>3</AreaIndex><ModuleName/><ModuleType/></ModuleMapper></RenderSet></RenderSets><NumConnections>4</NumConnections><Connections><Connection><Name>Connection</Name><Source><ModuleName>Sprite</ModuleName><ModuleType>ImageModule</ModuleType></Source><Destination><ModuleName>ParticleSystem</ModuleName><ModuleType>ParticleModule</ModuleType><Channel>1</Channel></Destination></Connection><Connection><Name>Connection</Name><Source><ModuleName>NoiseGradient</ModuleName><ModuleType>ShaderModule</ModuleType></Source><Destination><ModuleName>ParticleSystem</ModuleName><ModuleType>ParticleModule</ModuleType><Channel>0</Channel></Destination></Connection><Connection><Name>Connection</Name><Source><ModuleName>ParticleSystem</ModuleName><ModuleType>ParticleModule</ModuleType></Source><Destination><ModuleName>RenderSet</ModuleName><ModuleType>RenderSet</ModuleType><Channel>1</Channel></Destination></Connection><Connection><Name>Connection</Name><Source><ModuleName>Noise</ModuleName><ModuleType>ShaderModule</ModuleType></Source><Destination><ModuleName>RenderSet</ModuleName><ModuleType>RenderSet</ModuleType><Channel>0</Channel></Destination></Connection></Connections></ProjectMe>