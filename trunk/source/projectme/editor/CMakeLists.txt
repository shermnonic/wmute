# projectme editor - a GUI for projectme (sub-project)
# Max Hermann, Jul 2014

#---- Library -----------------------------------------------------------------

#projectmeImportLibrary( projlib )  
# --> As long as projlib is a parallel sub-project import is not required!

#---- Additional dependencies -------------------------------------------------

# --> Boost and Qt4 already configures in main CMakeList

#--- BASS related source

if( PROJECTME_USE_BASS )
	set( BASS_MOC_SRCS
		SoundInputWidget.h
	)
	set( BASS_GUI_SRCS 
		SoundInputWidget.h
		SoundInputWidget.cpp
	)
	set( BASS_ENGINE_SRCS 
		SoundInput.h
		SoundInput.cpp
		SoundModule.h
		SoundModule.cpp
	)
	target_link_libraries( projectme
		${BASS_LIBRARY}
	)
endif()

#---- qne Qt Node Editor  -----------------------------------------------------

set( qne_SRCS
	qneblock.h
	qneconnection.h
	qneport.h
	qnodeseditor.h
	qneblock.cpp
	qneconnection.cpp
	qneport.cpp
	qnodeseditor.cpp
)
source_group("qne" FILES ${qne_SRCS})

#---- Qt4 resources & moc -----------------------------------------------------

# Qt4 resource files
set( projectme_RCCS projectme.qrc )

# moc headers
set( projectme_MOC_HDRS	
	MainWindow.h
	RenderSetWidget.h
	ModuleManagerWidget.h
	ModuleRendererWidget.h
	ModuleParameterWidget.h
	MapperWidget.h
	ComboBoxDelegate.h
	CodeEditor.h
	ShaderEditorWidget.h
	Highlighter.h
	NodeEditorWidget.h
#	${qne_SRCS}
	qnodeseditor.h
	QAutoGUI.h
	QDebugStream.h
	${BASS_MOC_SRCS}
	#SoundInputWidget.h
)

# generate rules for building source files from the Qt resources
qt4_add_resources( projectme_RCC_SRCS ${projectme_RCCS} )

# generate rules for building source files that moc generates
qt4_wrap_cpp( projectme_MOC_SRCS ${projectme_MOC_HDRS} )

# not sure what the advantage of "automoc" is
qt4_automoc( ${projectme_MOC_HDRS} )

source_group("Autogenerated Moc files" FILES ${projectme_MOC_SRCS})


#---- Compiler config ---------------------------------------------------------

add_definitions("-DNOMINMAX")

#---- Executables -------------------------------------------------------------

# Put source code into groups

source_group("glutils" FILES ${GLUTILS_SOURCES})

set( gui_SRCS
	main.cpp
	MainWindow.cpp
	MainWindow.h
	RenderSetWidget.h
	RenderSetWidget.cpp
	ModuleManagerWidget.h
	ModuleManagerWidget.cpp
	ModuleRendererWidget.h
	ModuleRendererWidget.cpp
	ModuleParameterWidget.h
	ModuleParameterWidget.cpp
	MapperWidget.h
	MapperWidget.cpp
	ComboBoxDelegate.h
	ComboBoxDelegate.cpp
	CodeEditor.h
	CodeEditor.cpp
	Highlighter.h
	Highlighter.cpp
	ShaderEditorWidget.h
	ShaderEditorWidget.cpp
	NodeEditorWidget.h
	NodeEditorWidget.cpp
	QAutoGUI.h
	${BASS_GUI_SRCS}
)
source_group("gui" FILES ${gui_SRCS})

set( engine_SRCS
	DistanceTransformFelzenszwalb.h
	Connection.h
	Connection.cpp
	Module.h
	Module.cpp
	ModuleFactory.h
	ModuleFactory.cpp
	RenderSet.h
	RenderSet.cpp
	ShaderModule.h
	ShaderModule.cpp
	ShaderPrecompiler.h
	ShaderPrecompiler.cpp
	ParticleModule.h
	ParticleModule.cpp
	ParticleSystem.h
	ParticleSystem.cpp
	ImageModule.h
	ImageModule.cpp
	PotentialFromImageModule.h
	PotentialFromImageModule.cpp
	ProjectMe.h
	ProjectMe.cpp
	hraw.h	
	hraw.cpp
	Parameter.h
	Parameter.cpp
	Serializable.h
	${BASS_ENGINE_SRCS}
)
source_group("engine" FILES ${engine_SRCS})

add_executable( projectme
	${scene_SRCS}
	${gui_SRCS}
	${qne_SRCS}
	${engine_SRCS}
	${projectme_MOC_SRCS}
	${projectme_RCC_SRCS}
	${GLUTILS_SOURCES}
	projectme.rc    # Visual Studio resource(s), e.g. windows application icon	
)
target_link_libraries( projectme
	# projlib
	${OPENMESH_LIBRARIES}
	${QT_LIBRARIES}
	${OPENGL_LIBRARIES}
	${GLEW_LIBRARY}
)
