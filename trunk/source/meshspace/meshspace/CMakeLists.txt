# meshspace - a GUI for meshtools (sub-project)
# Max Hermann, Jan 2014

#---- Library -----------------------------------------------------------------

#meshtoolsImportLibrary( meshtools )  
# --> As long as meshtools is a parallel sub-project import is not required!

#---- Additional dependencies -------------------------------------------------

#---------------------------------------------------------
# Boost (e.g. filesystem dependency in included libraries)
# // unix needs filesystem AND system-package by boost 
#----------------------------------------------------------
set(Boost_USE_STATIC_LIBS      ON)
set(Boost_USE_MULTITHREADED    ON)
set(Boost_USE_STATIC_RUNTIME  OFF)
set(Boost_NO_SYSTEM_PATHS      ON)
set(Boost_DEBUG OFF)
find_package(Boost REQUIRED) # header only so far
#find_package(Boost COMPONENTS system filesystem program_options REQUIRED)
# prevent boost automatic linkage on Windows
add_definitions(-DBOOST_ALL_NO_LIB)
message(STATUS "Boost_INCLUDE_DIR=${Boost_INCLUDE_DIR}")
message(STATUS "Boost_LIBRARIES=${Boost_LIBRARIES}")
message(STATUS "Boost_LIBRARY_DIRS=${Boost_LIBRARY_DIRS}")
message(STATUS "BOOST_LIBRARYDIR=${BOOST_LIBRARYDIR}")
include_directories(${Boost_INCLUDE_DIR})

#-------------------
# Qt4
#-------------------
find_package(Qt4 COMPONENTS QtCore QtGui QtOpenGL QtXml REQUIRED)
include(${QT_USE_FILE})

#-------------------
# libQGLViewer2
#-------------------
find_package(QGLViewer REQUIRED)
include_directories( ${QGLVIEWER_INCLUDE_DIR} )

#---- Qt4 resources & moc -----------------------------------------------------

# Qt4 resource files
set( meshspace_RCCS meshspace.qrc )

# moc headers
set( meshspace_MOC_HDRS	
	MainWindow.h
	SceneViewer.h
	ObjectPropertiesWidget.h
	ObjectBrowserWidget.h
	MultiSliderWidget.h
	TensorfieldObjectWidget.h
)

# generate rules for building source files from the Qt resources
qt4_add_resources( meshspace_RCC_SRCS ${meshspace_RCCS} )

# generate rules for building source files that moc generates
qt4_wrap_cpp( meshspace_MOC_SRCS ${meshspace_MOC_HDRS} )

# not sure what the advantage of "automoc" is
qt4_automoc( ${meshspace_MOC_HDRS} )

source_group("Autogenerated Moc files" FILES ${meshspace_MOC_SRCS})


#---- Executables -------------------------------------------------------------

# Put source code into groups

source_group("glutils" FILES ${GLUTILS_SOURCES})

set( scene_SRCS
	scene.cpp
	scene.h	
	filters.h
	filters.cpp
	MeshObject.h
	MeshObject.cpp
	PCAObject.h
	PCAObject.cpp
	TensorfieldObject.h
	TensorfieldObject.cpp
	MeshShader.h
	MeshShader.cpp
	TransferFunction.h
	TransferFunction.cpp
)
source_group("scene" FILES ${scene_SRCS})

set( gui_SRCS
	meshspace.cpp
	MainWindow.cpp
	MainWindow.h
	SceneViewer.cpp
	SceneViewer.h
	ObjectPropertiesWidget.h
	ObjectPropertiesWidget.cpp
	ObjectBrowserWidget.h
	ObjectBrowserWidget.cpp
	MultiSliderWidget.h
	MultiSliderWidget.cpp
	TensorfieldObjectWidget.h
	TensorfieldObjectWidget.cpp
)
source_group("gui" FILES ${gui_SRCS})

set( other_SRCS
	Crossvalidate.h	
	Crossvalidate.cpp
	CovarianceClustering.h
	CovarianceClustering.cpp
	PAMClustering.h
	PAMClustering.cpp
)
source_group("other" FILES ${other_SRCS})

add_executable( meshspace
	${scene_SRCS}
	${gui_SRCS}
	${other_SRCS}
	${meshspace_MOC_SRCS}
	${meshspace_RCC_SRCS}
	${GLUTILS_SOURCES}
)
target_link_libraries( meshspace
	meshtools
	${OPENMESH_LIBRARIES}
	${QT_LIBRARIES}
	${OPENGL_LIBRARIES}
	${QGLVIEWER_LIBRARIES}
	${GLEW_LIBRARY}	
)
